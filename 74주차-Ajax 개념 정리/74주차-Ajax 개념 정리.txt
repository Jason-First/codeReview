Ajax란?
  Ajax란 Asynchronous JavaScript and XML의 약자입니다.
  Ajax는 빠르게 동작하는 동적인 웹 페이지를 만들기 위한 개발 기법의 하나입니다.
  Ajax는 웹 페이지 전체를 다시 로딩하지 않고도, 웹 페이지의 일부분만을 갱신할 수 있습니다.
  즉 Ajax를 이용하면 백그라운드 영역에서 서버와 통신하여, 그 결과를 웹 페이지의 일부분에만 표시할 수 있습니다.
  이때 서버와는 다음과 같은 다양한 형태의 데이터를 주고받을 수 있습니다.
    - JSON
    - XML
    - HTML
    - 텍스트 파일 등


Ajax의 장점
  Ajax를 이용하면 다음과 같은 장점이 있습니다.
    1. 웹 페이지 전체를 다시 로딩하지 않고도, 웹 페이지의 일부분만을 갱신할 수 있습니다.
    2. 웹 페이지가 로드된 후에 서버로 데이터 요청을 보낼 수 있습니다.
    3. 웹 페이지가 로드된 후에 서버로부터 데이터를 받을 수 있습니다.
    4. 백그라운드 영역에서 서버로 데이터를 보낼 수 있습니다.
	

Ajax의 한계
  Ajax를 이용하면 여러 장점을 가지지만, Ajax로도 다음과 같은 일들은 처리할 수 없습니다.
    1. Ajax는 클라이언트가 서버에 데이터를 요청하는 클라이언트 풀링 방식을 사용하므로, 서버 푸시 방식의 실시간 서비스는 만들 수 없습니다.
    2. Ajax로는 바이너리 데이터를 보내거나 받을 수 없습니다.
    3. Ajax 스크립트가 포함된 서버가 아닌 다른 서버로 Ajax 요청을 보낼 수는 없습니다.
    4. 클라이언트의 PC로 Ajax 요청을 보낼 수는 없습니다.


Ajax 프레임워크
  Ajax를 이용하여 개발을 손쉽게 할 수 있도록 미리 여러 가지 기능을 포함해 놓은 개발 환경을 Ajax 프레임워크라고 합니다.
  이러한 Ajax 프레임워크 중에서도 가장 많이 사용되는 프레임워크는 다음과 같습니다.
    - Prototype
    - script.aculo.us
    - dojo
    - jQuery
  이외에도 수많은 Ajax 프레임워크가 널리 사용되고 있습니다.


XMLHttpRequest 객체
  Ajax의 가장 핵심적인 구성 요소는 바로 XMLHttpRequest 객체입니다.
  Ajax에서 XMLHttpRequest 객체는 웹 브라우저가 서버와 데이터를 교환할 때 사용됩니다.
  웹 브라우저가 백그라운드에서 계속해서 서버와 통신할 수 있는 것은 바로 이 객체를 사용하기 때문입니다.  
  현재 대부분의 주요 웹 브라우저는 XMLHttpRequest 객체를 내장하고 있습니다.
  이러한 XMLHttpRequest 객체를 생성하는 방법은 브라우저의 종류에 따라 다음과 같이 나눠집니다.
    1. XMLHttpRequest 객체를 이용한 방법
    2. ActiveXObject 객체를 이용한 방법
  익스플로러 7과 그 이상의 버전, 크롬, 파이어폭스, 사파리, 오페라에서는 XMLHttpRequest 객체를 사용합니다.
  하지만 익스플로러의 구형 버전인 5와 6 버전에서는 ActiveXObject 객체를 사용해야 합니다.
  따라서 모든 웹 브라우저에서 XMLHttpRequest 인스턴스를 제대로 생성하기 위해서는 다음과 같이 작성해야 합니다.
    예제)
      var httpRequest;
      function createRequest() {
        if (window.XMLHttpRequest) { // 익스플로러 7과 그 이상의 버전, 크롬, 파이어폭스, 사파리, 오페라 등
          return new XMLHttpRequest();
        } else {                     // 익스플로러 6과 그 이하의 버전
          return new ActiveXObject("Microsoft.XMLHTTP");
        }
      }


서버에 요청(request)하기
  Ajax에서는 XMLHttpRequest 객체를 사용하여 서버와 데이터를 교환합니다.
  따라서 서버에 요청을 보내기 위해서는 우선 XMLHttpRequest 인스턴스를 생성해야 합니다.
  XMLHttpRequest 인스턴스의 open() 메소드와 send() 메소드를 사용하여 요청을 보낼 수 있습니다.
    1. GET 방식으로 요청을 보내면서 데이터를 동시에 전달함.
      httpRequest.open("GET", "/examples/media/request_ajax.php?city=Seoul&zipcode=06141", true);
      httpRequest.send();
	2. POST 방식의 요청은 데이터를 Http 헤더에 포함시켜 전송함.
      httpRequest.open("POST", "/examples/media/request_ajax.php", true);
      httpRequest.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
      httpRequest.send("city=Seoul&zipcode=06141");
	  
	  
비동기식(asynchronous) 요청
  - 서버에 비동기식 요청을 보내기 위해서는 open() 메소드의 세 번째 인수로 true를 전달하면 됩니다.
  - 이렇게 서버로 비동기식 요청을 보내면, 자바스크립트는 서버로부터의 응답을 기다리면서 동시에 다른 일을 할 수 있게 됩니다.
  - 만약 open() 메소드의 세 번째 인수로 false를 전달하면, 서버에 동기식 요청을 보내게 됩니다.
  - 이때 자바스크립트는 서버로부터 응답이 도착할 때까지 대기하게 됩니다.
  - 따라서 사용자는 대기하는 동안 다른 어떤 작업도 할 수 없게 됩니다.


서버로부터의 응답(response) 확인
  Ajax에서 서버로부터의 응답을 확인하기 위해 사용하는 XMLHttpRequest 객체의 프로퍼티는 다음과 같습니다.
    1. readyState 프로퍼티
	  - readyState 프로퍼티는 XMLHttpRequest 객체의 현재 상태를 나타냅니다.
      - 이 프로퍼티의 값은 객체의 현재 상태에 따라 다음과 같은 주기로 변화합니다.
        1) UNSENT (숫자 0) : XMLHttpRequest 객체가 생성됨.
        2) OPENED (숫자 1) : open() 메소드가 성공적으로 실행됨.
        3) HEADERS_RECEIVED (숫자 2) : 모든 요청에 대한 응답이 도착함.
        4) LOADING (숫자 3) : 요청한 데이터를 처리 중임.
        5) DONE (숫자 4) : 요청한 데이터의 처리가 완료되어 응답할 준비가 완료됨.
    2. status 프로퍼티
	  - status 프로퍼티는 서버의 문서 상태를 나타냅니다.
        1) 200 : 서버에 문서가 존재함.
        2) 404 : 서버에 문서가 존재하지 않음.
    3. onreadystatechange 프로퍼티
	  - onreadystatechange 프로퍼티는 XMLHttpRequest 객체의 readyState 프로퍼티 값이 변할 때마다 자동으로 호출되는 함수를 설정합니다.
  	  - 이 함수는 서버에서 응답이 도착할 때까지 readyState 프로퍼티 값의 변화에 따라 총 5번 호출됩니다.
	  - 이 프로퍼티를 이용하면 서버에 요청한 데이터가 존재하고, 서버로부터 응답이 도착하는 순간을 특정할 수 있습니다.
	    예제)
	      switch (httpRequest.readyState) {
	        case XMLHttpRequest.UNSET:
	          currentState += "현재 XMLHttpRequest 객체의 상태는 UNSET 입니다.<br>";
	          break;
	        case XMLHttpRequest.OPENED:
	          currentState += "현재 XMLHttpRequest 객체의 상태는 OPENED 입니다.<br>";
	          break;
	        case XMLHttpRequest.HEADERS_RECIEVED:
	          currentState += "현재 XMLHttpRequest 객체의 상태는 HEADERS_RECEIVED 입니다.<br>";
	          break;
	        case XMLHttpRequest.LOADING:
	          currentState += "현재 XMLHttpRequest 객체의 상태는 LOADING 입니다.<br>";
	          break;
	        case XMLHttpRequest.DONE:
	          currentState += "현재 XMLHttpRequest 객체의 상태는 DONE 입니다.<br>";
	          break;
	      }
	      document.getElementById("status").innerHTML = currentState;
	      if (httpRequest.readyState == XMLHttpRequest.DONE && httpRequest.status == 200 ) {
	        document.getElementById("text").innerHTML = httpRequest.responseText;
	      }


JQuery와 Ajax
  Ajax를 이용하여 개발을 손쉽게 할 수 있도록 미리 여러 가지 기능을 포함해 놓은 개발 환경을 Ajax 프레임워크라고 합니다.
  그중에서도 현재 가장 널리 사용되고 있는 Ajax 프레임워크는 바로 제이쿼리(jQuery)입니다.
  제이쿼리는 Ajax와 관련된 다양하고도 편리한 메소드를 많이 제공하고 있습니다.
  그중에서도 $.ajax() 메소드는 모든 제이쿼리 Ajax 메소드의 핵심이 되는 메소드입니다.
  $.ajax() 메소드는 HTTP 요청을 만드는 강력하고도 직관적인 방법을 제공합니다.
    예제)
      $.ajax({
        url: "/examples/media/request_ajax.php", // 클라이언트가 요청을 보낼 서버의 URL 주소
        data: { name: "홍길동" },                // HTTP 요청과 함께 서버로 보낼 데이터
        type: "GET",                             // HTTP 요청 방식(GET, POST)
        dataType: "json"                         // 서버에서 보내줄 데이터의 타입
      })
      // HTTP 요청이 성공하면 요청한 데이터가 done() 메소드로 전달됨.
      .done(function(json) {
        $("<h1>").text(json.title).appendTo("body");
        $("<div class=\"content\">").html(json.html).appendTo("body");
      })
      // HTTP 요청이 실패하면 오류와 상태에 관한 정보가 fail() 메소드로 전달됨.
      .fail(function(xhr, status, errorThrown) {
        $("#text").html("오류가 발생했습니다.<br>")
        .append("오류명: " + errorThrown + "<br>")
        .append("상태: " + status);
      })
      // HTTP 요청이 성공하거나 실패하는 것에 상관없이 언제나 always() 메소드가 실행됨.
      .always(function(xhr, status) {
        $("#text").html("요청이 완료되었습니다!");
      });


Ajax 요청 취소
  서버로 보낸 Ajax 요청에 대한 응답이 도착하기 전에 해당 요청을 취소해야 할 때는 abort() 메소드를 사용하면 됩니다.
    예제)
      function abortRequest() {
        httpRequest.abort();
        document.getElementById("text").innerHTML = "Ajax 요청을 취소했습니다.";
      }